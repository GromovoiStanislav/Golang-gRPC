// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: protos/math.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MathService_CalculateSquare_FullMethodName = "/math.MathService/CalculateSquare"
)

// MathServiceClient is the client API for MathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathServiceClient interface {
	CalculateSquare(ctx context.Context, opts ...grpc.CallOption) (MathService_CalculateSquareClient, error)
}

type mathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMathServiceClient(cc grpc.ClientConnInterface) MathServiceClient {
	return &mathServiceClient{cc}
}

func (c *mathServiceClient) CalculateSquare(ctx context.Context, opts ...grpc.CallOption) (MathService_CalculateSquareClient, error) {
	stream, err := c.cc.NewStream(ctx, &MathService_ServiceDesc.Streams[0], MathService_CalculateSquare_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mathServiceCalculateSquareClient{stream}
	return x, nil
}

type MathService_CalculateSquareClient interface {
	Send(*NumberRequest) error
	Recv() (*NumberResponse, error)
	grpc.ClientStream
}

type mathServiceCalculateSquareClient struct {
	grpc.ClientStream
}

func (x *mathServiceCalculateSquareClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mathServiceCalculateSquareClient) Recv() (*NumberResponse, error) {
	m := new(NumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathServiceServer is the server API for MathService service.
// All implementations must embed UnimplementedMathServiceServer
// for forward compatibility
type MathServiceServer interface {
	CalculateSquare(MathService_CalculateSquareServer) error
	mustEmbedUnimplementedMathServiceServer()
}

// UnimplementedMathServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMathServiceServer struct {
}

func (UnimplementedMathServiceServer) CalculateSquare(MathService_CalculateSquareServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateSquare not implemented")
}
func (UnimplementedMathServiceServer) mustEmbedUnimplementedMathServiceServer() {}

// UnsafeMathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathServiceServer will
// result in compilation errors.
type UnsafeMathServiceServer interface {
	mustEmbedUnimplementedMathServiceServer()
}

func RegisterMathServiceServer(s grpc.ServiceRegistrar, srv MathServiceServer) {
	s.RegisterService(&MathService_ServiceDesc, srv)
}

func _MathService_CalculateSquare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MathServiceServer).CalculateSquare(&mathServiceCalculateSquareServer{stream})
}

type MathService_CalculateSquareServer interface {
	Send(*NumberResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type mathServiceCalculateSquareServer struct {
	grpc.ServerStream
}

func (x *mathServiceCalculateSquareServer) Send(m *NumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mathServiceCalculateSquareServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MathService_ServiceDesc is the grpc.ServiceDesc for MathService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "math.MathService",
	HandlerType: (*MathServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateSquare",
			Handler:       _MathService_CalculateSquare_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/math.proto",
}
