// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: protos/number_stream.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NumberStream_GenerateNumbers_FullMethodName = "/number_stream.NumberStream/GenerateNumbers"
)

// NumberStreamClient is the client API for NumberStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberStreamClient interface {
	GenerateNumbers(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (NumberStream_GenerateNumbersClient, error)
}

type numberStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberStreamClient(cc grpc.ClientConnInterface) NumberStreamClient {
	return &numberStreamClient{cc}
}

func (c *numberStreamClient) GenerateNumbers(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (NumberStream_GenerateNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumberStream_ServiceDesc.Streams[0], NumberStream_GenerateNumbers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &numberStreamGenerateNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NumberStream_GenerateNumbersClient interface {
	Recv() (*NumberResponse, error)
	grpc.ClientStream
}

type numberStreamGenerateNumbersClient struct {
	grpc.ClientStream
}

func (x *numberStreamGenerateNumbersClient) Recv() (*NumberResponse, error) {
	m := new(NumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberStreamServer is the server API for NumberStream service.
// All implementations must embed UnimplementedNumberStreamServer
// for forward compatibility
type NumberStreamServer interface {
	GenerateNumbers(*NumberRequest, NumberStream_GenerateNumbersServer) error
	mustEmbedUnimplementedNumberStreamServer()
}

// UnimplementedNumberStreamServer must be embedded to have forward compatible implementations.
type UnimplementedNumberStreamServer struct {
}

func (UnimplementedNumberStreamServer) GenerateNumbers(*NumberRequest, NumberStream_GenerateNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateNumbers not implemented")
}
func (UnimplementedNumberStreamServer) mustEmbedUnimplementedNumberStreamServer() {}

// UnsafeNumberStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberStreamServer will
// result in compilation errors.
type UnsafeNumberStreamServer interface {
	mustEmbedUnimplementedNumberStreamServer()
}

func RegisterNumberStreamServer(s grpc.ServiceRegistrar, srv NumberStreamServer) {
	s.RegisterService(&NumberStream_ServiceDesc, srv)
}

func _NumberStream_GenerateNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumberStreamServer).GenerateNumbers(m, &numberStreamGenerateNumbersServer{stream})
}

type NumberStream_GenerateNumbersServer interface {
	Send(*NumberResponse) error
	grpc.ServerStream
}

type numberStreamGenerateNumbersServer struct {
	grpc.ServerStream
}

func (x *numberStreamGenerateNumbersServer) Send(m *NumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NumberStream_ServiceDesc is the grpc.ServiceDesc for NumberStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "number_stream.NumberStream",
	HandlerType: (*NumberStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateNumbers",
			Handler:       _NumberStream_GenerateNumbers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/number_stream.proto",
}
